{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _default = `\n    // Enhanced error handling and validation\n    var wrapper = document.getElementById(\"signature-pad\"),\n        clearButton = wrapper && wrapper.querySelector(\"[data-action=clear]\"),\n        saveButton = wrapper && wrapper.querySelector(\"[data-action=save]\"),\n        canvas = wrapper && wrapper.querySelector(\"canvas\"),\n        signaturePad;\n        \n    if (!wrapper || !canvas) {\n        console.error('Required DOM elements not found');\n    }\n    \n    // Enhanced canvas resize with debouncing\n    function debounce(func, wait) {\n        var timeout;\n        return function executedFunction() {\n            var later = function() {\n                clearTimeout(timeout);\n                func.apply(this, arguments);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n    \n    function resizeCanvas() {\n        if (!canvas || !canvas.getContext) {\n            console.warn('Canvas not available for resize');\n            return;\n        }\n        \n        try {\n            var context = canvas.getContext(\"2d\");\n            var imgData = signaturePad ? signaturePad.toData() : null;\n            var ratio = Math.max(window.devicePixelRatio || 1, 1);\n            \n            canvas.width = canvas.offsetWidth * ratio;\n            canvas.height = canvas.offsetHeight * ratio;\n            context.scale(ratio, ratio);\n            \n            if (imgData && signaturePad) {\n                signaturePad.fromData(imgData);\n            }\n        } catch (error) {\n            console.error('Error resizing canvas:', error);\n        }\n    }\n    \n    // Use debounced resize handler\n    var debouncedResize = debounce(resizeCanvas, 100);\n    window.addEventListener('resize', debouncedResize);\n    resizeCanvas();\n    \n    signaturePad = new SignaturePad(canvas, {\n        onBegin: () => window.ReactNativeWebView.postMessage(\"BEGIN\"),\n        onEnd: () => window.ReactNativeWebView.postMessage(\"END\"),\n        penColor: '<%penColor%>',\n        backgroundColor: '<%backgroundColor%>',\n        dotSize: <%dotSize%>,\n        minWidth: <%minWidth%>,\n        maxWidth: <%maxWidth%>,\n        minDistance: <%minDistance%>,\n    });\n\n    function clearSignature () {\n        signaturePad.clear();\n        window.ReactNativeWebView.postMessage(\"CLEAR\");\n    }\n    \n    function undo() {\n        signaturePad.undo();\n        window.ReactNativeWebView.postMessage(\"UNDO\");\n    }\n    \n    function redo() {\n        signaturePad.redo();\n        window.ReactNativeWebView.postMessage(\"REDO\");\n      }\n\n    function changePenColor(color) {\n        if (!signaturePad) {\n            console.warn('SignaturePad not initialized');\n            return;\n        }\n        \n        signaturePad.penColor = color;\n        window.ReactNativeWebView && window.ReactNativeWebView.postMessage(\"CHANGE_PEN\");\n    }\n\n    function changePenSize(minW, maxW) {\n        if (!signaturePad) {\n            console.warn('SignaturePad not initialized');\n            return;\n        }\n        \n        // Validate numeric values\n        if (typeof minW !== 'number' || typeof maxW !== 'number' || minW < 0 || maxW < minW) {\n            console.warn('Invalid pen size values:', minW, maxW);\n            return;\n        }\n        \n        signaturePad.minWidth = minW;\n        signaturePad.maxWidth = maxW;\n        window.ReactNativeWebView && window.ReactNativeWebView.postMessage(\"CHANGE_PEN_SIZE\");\n    }\n    \n    function getData () {\n        var data = signaturePad.toData();\n        window.ReactNativeWebView.postMessage(JSON.stringify(data));\n    }\n\n    function fromData (pointGroups) {\n        signaturePad.fromData(pointGroups);\n        window.ReactNativeWebView.postMessage(JSON.stringify(pointGroups));\n    }\n\n    function draw() {\n      signaturePad.draw();\n      window.ReactNativeWebView.postMessage(\"DRAW\");\n    }\n\n    function erase() {\n      signaturePad.erase();\n      window.ReactNativeWebView.postMessage(\"ERASE\");\n    }\n\n    function cropWhitespace(url) {\n        var myImage = new Image();\n        myImage.crossOrigin = \"Anonymous\";\n        myImage.onload = function(){\n            window.ReactNativeWebView.postMessage(removeImageBlanks(myImage)); //Will return cropped image data\n        }\n        myImage.src = url;\n\n        //-----------------------------------------//\n        function removeImageBlanks(imageObject) {\n            var imgWidth = imageObject.width;\n            var imgHeight = imageObject.height;\n            var canvas = document.createElement('canvas');\n            canvas.setAttribute(\"width\", imgWidth);\n            canvas.setAttribute(\"height\", imgHeight);\n            var context = canvas.getContext('2d');\n            context.drawImage(imageObject, 0, 0);\n\n            var imageData = context.getImageData(0, 0, imgWidth, imgHeight),\n                data = imageData.data,\n                getRGB = function(x, y) {\n                    if (x < 0 || x >= imgWidth || y < 0 || y >= imgHeight) {\n                        return { red: 255, green: 255, blue: 255, opacity: 255 };\n                    }\n                    var offset = imgWidth * y + x;\n                    return {\n                        red:     data[offset * 4],\n                        green:   data[offset * 4 + 1],\n                        blue:    data[offset * 4 + 2],\n                        opacity: data[offset * 4 + 3]\n                    };\n                },\n                isWhite = function (rgb) {\n                    // many images contain noise, as the white is not a pure #fff white\n                    return !rgb.opacity || (rgb.red > 200 && rgb.green > 200 && rgb.blue > 200);\n                },\n                        scanY = function (fromTop) {\n                var offset = fromTop ? 1 : -1;\n\n                // loop through each row\n                for(var y = fromTop ? 0 : imgHeight - 1; fromTop ? (y < imgHeight) : (y > -1); y += offset) {\n\n                    // loop through each column\n                    for(var x = 0; x < imgWidth; x++) {\n                        var rgb = getRGB(x, y);\n                        if (!isWhite(rgb)) {\n                            if (fromTop) {\n                                return y;\n                            } else {\n                                return Math.min(y + 1, imgHeight);\n                            }\n                        }\n                    }\n                }\n                return null; // all image is white\n            },\n            scanX = function (fromLeft) {\n                var offset = fromLeft? 1 : -1;\n\n                // loop through each column\n                for(var x = fromLeft ? 0 : imgWidth - 1; fromLeft ? (x < imgWidth) : (x > -1); x += offset) {\n\n                    // loop through each row\n                    for(var y = 0; y < imgHeight; y++) {\n                        var rgb = getRGB(x, y);\n                        if (!isWhite(rgb)) {\n                            if (fromLeft) {\n                                return x;\n                            } else {\n                                return Math.min(x + 1, imgWidth);\n                            }\n                        }      \n                    }\n                }\n                return null; // all image is white\n            };\n\n            var cropTop = scanY(true),\n                cropBottom = scanY(false),\n                cropLeft = scanX(true),\n                cropRight = scanX(false),\n                cropWidth = cropRight - cropLeft,\n                cropHeight = cropBottom - cropTop;\n\n            canvas.setAttribute(\"width\", cropWidth);\n            canvas.setAttribute(\"height\", cropHeight);\n            // finally crop the guy\n            canvas.getContext(\"2d\").drawImage(imageObject,\n                cropLeft, cropTop, cropWidth, cropHeight,\n                0, 0, cropWidth, cropHeight);\n\n            return canvas.toDataURL('<%imageType%>');\n        }\n    }\n\n    function readSignature() {\n        if (!signaturePad) {\n            console.warn('SignaturePad not initialized');\n            return;\n        }\n        \n        try {\n            if (signaturePad.isEmpty()) {\n                window.ReactNativeWebView && window.ReactNativeWebView.postMessage(\"EMPTY\");\n            } else {\n                var imageType = '<%imageType%>' || 'image/png';\n                var url = signaturePad.toDataURL(imageType);\n                \n                if (trimWhitespace === true) {\n                    cropWhitespace(url);\n                } else {\n                    window.ReactNativeWebView && window.ReactNativeWebView.postMessage(url);\n                }\n                \n                if (autoClear === true && signaturePad) {\n                    signaturePad.clear();\n                }\n            }\n        } catch (error) {\n            console.error('Error reading signature:', error);\n        }\n    }\n\n    var autoClear = <%autoClear%>;\n    \n    var trimWhitespace = <%trimWhitespace%>;\n\n    var dataURL = '<%dataURL%>';\n\n    if (dataURL) signaturePad.fromDataURL(dataURL);\n\n    if (clearButton) {\n        clearButton.addEventListener(\"click\", clearSignature);\n    }\n\n    // Prevent race conditions by sequencing operations\n    if (saveButton) {\n        saveButton.addEventListener(\"click\", function() {\n            try {\n                readSignature();\n                // Small delay to prevent race condition\n                setTimeout(function() {\n                    getData();\n                }, 10);\n            } catch (error) {\n                console.error('Error in save button click:', error);\n            }\n        });\n    }\n`;\n});","lineCount":289,"map":[[7,2,1,0,"Object"],[7,8,1,0],[7,9,1,0,"defineProperty"],[7,23,1,0],[7,24,1,0,"exports"],[7,31,1,0],[8,4,1,0,"enumerable"],[8,14,1,0],[9,4,1,0,"get"],[9,7,1,0],[9,18,1,0,"get"],[9,19,1,0],[10,6,1,0],[10,13,1,0,"_default"],[10,21,1,0],[11,4,1,0],[12,2,1,0],[13,2,1,0],[13,6,1,0,"_default"],[13,14,1,0],[13,17,1,15],[14,0,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,0,7,0],[20,0,8,0],[21,0,9,0],[22,0,10,0],[23,0,11,0],[24,0,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,0,35,0],[48,0,36,0],[49,0,37,0],[50,0,38,0],[51,0,39,0],[52,0,40,0],[53,0,41,0],[54,0,42,0],[55,0,43,0],[56,0,44,0],[57,0,45,0],[58,0,46,0],[59,0,47,0],[60,0,48,0],[61,0,49,0],[62,0,50,0],[63,0,51,0],[64,0,52,0],[65,0,53,0],[66,0,54,0],[67,0,55,0],[68,0,56,0],[69,0,57,0],[70,0,58,0],[71,0,59,0],[72,0,60,0],[73,0,61,0],[74,0,62,0],[75,0,63,0],[76,0,64,0],[77,0,65,0],[78,0,66,0],[79,0,67,0],[80,0,68,0],[81,0,69,0],[82,0,70,0],[83,0,71,0],[84,0,72,0],[85,0,73,0],[86,0,74,0],[87,0,75,0],[88,0,76,0],[89,0,77,0],[90,0,78,0],[91,0,79,0],[92,0,80,0],[93,0,81,0],[94,0,82,0],[95,0,83,0],[96,0,84,0],[97,0,85,0],[98,0,86,0],[99,0,87,0],[100,0,88,0],[101,0,89,0],[102,0,90,0],[103,0,91,0],[104,0,92,0],[105,0,93,0],[106,0,94,0],[107,0,95,0],[108,0,96,0],[109,0,97,0],[110,0,98,0],[111,0,99,0],[112,0,100,0],[113,0,101,0],[114,0,102,0],[115,0,103,0],[116,0,104,0],[117,0,105,0],[118,0,106,0],[119,0,107,0],[120,0,108,0],[121,0,109,0],[122,0,110,0],[123,0,111,0],[124,0,112,0],[125,0,113,0],[126,0,114,0],[127,0,115,0],[128,0,116,0],[129,0,117,0],[130,0,118,0],[131,0,119,0],[132,0,120,0],[133,0,121,0],[134,0,122,0],[135,0,123,0],[136,0,124,0],[137,0,125,0],[138,0,126,0],[139,0,127,0],[140,0,128,0],[141,0,129,0],[142,0,130,0],[143,0,131,0],[144,0,132,0],[145,0,133,0],[146,0,134,0],[147,0,135,0],[148,0,136,0],[149,0,137,0],[150,0,138,0],[151,0,139,0],[152,0,140,0],[153,0,141,0],[154,0,142,0],[155,0,143,0],[156,0,144,0],[157,0,145,0],[158,0,146,0],[159,0,147,0],[160,0,148,0],[161,0,149,0],[162,0,150,0],[163,0,151,0],[164,0,152,0],[165,0,153,0],[166,0,154,0],[167,0,155,0],[168,0,156,0],[169,0,157,0],[170,0,158,0],[171,0,159,0],[172,0,160,0],[173,0,161,0],[174,0,162,0],[175,0,163,0],[176,0,164,0],[177,0,165,0],[178,0,166,0],[179,0,167,0],[180,0,168,0],[181,0,169,0],[182,0,170,0],[183,0,171,0],[184,0,172,0],[185,0,173,0],[186,0,174,0],[187,0,175,0],[188,0,176,0],[189,0,177,0],[190,0,178,0],[191,0,179,0],[192,0,180,0],[193,0,181,0],[194,0,182,0],[195,0,183,0],[196,0,184,0],[197,0,185,0],[198,0,186,0],[199,0,187,0],[200,0,188,0],[201,0,189,0],[202,0,190,0],[203,0,191,0],[204,0,192,0],[205,0,193,0],[206,0,194,0],[207,0,195,0],[208,0,196,0],[209,0,197,0],[210,0,198,0],[211,0,199,0],[212,0,200,0],[213,0,201,0],[214,0,202,0],[215,0,203,0],[216,0,204,0],[217,0,205,0],[218,0,206,0],[219,0,207,0],[220,0,208,0],[221,0,209,0],[222,0,210,0],[223,0,211,0],[224,0,212,0],[225,0,213,0],[226,0,214,0],[227,0,215,0],[228,0,216,0],[229,0,217,0],[230,0,218,0],[231,0,219,0],[232,0,220,0],[233,0,221,0],[234,0,222,0],[235,0,223,0],[236,0,224,0],[237,0,225,0],[238,0,226,0],[239,0,227,0],[240,0,228,0],[241,0,229,0],[242,0,230,0],[243,0,231,0],[244,0,232,0],[245,0,233,0],[246,0,234,0],[247,0,235,0],[248,0,236,0],[249,0,237,0],[250,0,238,0],[251,0,239,0],[252,0,240,0],[253,0,241,0],[254,0,242,0],[255,0,243,0],[256,0,244,0],[257,0,245,0],[258,0,246,0],[259,0,247,0],[260,0,248,0],[261,0,249,0],[262,0,250,0],[263,0,251,0],[264,0,252,0],[265,0,253,0],[266,0,254,0],[267,0,255,0],[268,0,256,0],[269,0,257,0],[270,0,258,0],[271,0,259,0],[272,0,260,0],[273,0,261,0],[274,0,262,0],[275,0,263,0],[276,0,264,0],[277,0,265,0],[278,0,266,0],[279,0,267,0],[280,0,268,0],[281,0,269,0],[282,0,270,0],[283,0,271,0],[284,0,272,0],[285,0,273,0],[286,0,274,0],[287,0,275,0],[288,0,276,0],[288,1,276,1],[289,0,276,2],[289,3]],"functionMap":{"names":["<global>"],"mappings":"AAA"},"hasCjsExports":false},"type":"js/module"}]}