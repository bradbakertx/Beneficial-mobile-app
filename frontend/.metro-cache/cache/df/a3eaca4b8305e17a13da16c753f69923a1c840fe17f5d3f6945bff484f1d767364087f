{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.formatChatTime = formatChatTime;\n  exports.formatFullTimestamp = formatFullTimestamp;\n  /**\n   * Format a timestamp for display in chat\n   * - Shows time for messages today (e.g., \"2:30 PM\")\n   * - Shows \"Yesterday\" for messages from yesterday\n   * - Shows date for older messages (e.g., \"Oct 12\")\n   */\n  function formatChatTime(timestamp) {\n    // Ensure the timestamp is treated as UTC if it doesn't have timezone info\n    var date;\n    if (typeof timestamp === 'string') {\n      // If timestamp doesn't end with Z, add it to indicate UTC\n      var utcTimestamp = timestamp.endsWith('Z') ? timestamp : timestamp + 'Z';\n      date = new Date(utcTimestamp);\n    } else {\n      date = timestamp;\n    }\n    var now = new Date();\n    var isToday = date.toDateString() === now.toDateString();\n    if (isToday) {\n      // Show time only for today's messages\n      return date.toLocaleTimeString([], {\n        hour: 'numeric',\n        minute: '2-digit'\n      });\n    }\n\n    // Check if yesterday\n    var yesterday = new Date(now);\n    yesterday.setDate(yesterday.getDate() - 1);\n    var isYesterday = date.toDateString() === yesterday.toDateString();\n    if (isYesterday) {\n      return 'Yesterday';\n    }\n\n    // Check if this week\n    var weekAgo = new Date(now);\n    weekAgo.setDate(weekAgo.getDate() - 7);\n    if (date > weekAgo) {\n      // Show day of week (e.g., \"Monday\")\n      return date.toLocaleDateString([], {\n        weekday: 'long'\n      });\n    }\n\n    // Show date for older messages\n    return date.toLocaleDateString([], {\n      month: 'short',\n      day: 'numeric'\n    });\n  }\n\n  /**\n   * Format a full timestamp for message details\n   * Shows full date and time in local timezone\n   */\n  function formatFullTimestamp(timestamp) {\n    // Ensure the timestamp is treated as UTC if it doesn't have timezone info\n    var date;\n    if (typeof timestamp === 'string') {\n      // If timestamp doesn't end with Z, add it to indicate UTC\n      var utcTimestamp = timestamp.endsWith('Z') ? timestamp : timestamp + 'Z';\n      date = new Date(utcTimestamp);\n    } else {\n      date = timestamp;\n    }\n    return date.toLocaleString([], {\n      month: 'short',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit'\n    });\n  }\n});","lineCount":81,"map":[[7,2,7,0,"exports"],[7,9,7,0],[7,10,7,0,"formatChatTime"],[7,24,7,0],[7,27,7,0,"formatChatTime"],[7,41,7,0],[8,2,53,0,"exports"],[8,9,53,0],[8,10,53,0,"formatFullTimestamp"],[8,29,53,0],[8,32,53,0,"formatFullTimestamp"],[8,51,53,0],[9,2,1,0],[10,0,2,0],[11,0,3,0],[12,0,4,0],[13,0,5,0],[14,0,6,0],[15,2,7,7],[15,11,7,16,"formatChatTime"],[15,25,7,30,"formatChatTime"],[15,26,7,31,"timestamp"],[15,35,7,55],[15,37,7,65],[16,4,8,2],[17,4,9,2],[17,8,9,6,"date"],[17,12,9,16],[18,4,10,2],[18,8,10,6],[18,15,10,13,"timestamp"],[18,24,10,22],[18,29,10,27],[18,37,10,35],[18,39,10,37],[19,6,11,4],[20,6,12,4],[20,10,12,10,"utcTimestamp"],[20,22,12,22],[20,25,12,25,"timestamp"],[20,34,12,34],[20,35,12,35,"endsWith"],[20,43,12,43],[20,44,12,44],[20,47,12,47],[20,48,12,48],[20,51,12,51,"timestamp"],[20,60,12,60],[20,63,12,63,"timestamp"],[20,72,12,72],[20,75,12,75],[20,78,12,78],[21,6,13,4,"date"],[21,10,13,8],[21,13,13,11],[21,17,13,15,"Date"],[21,21,13,19],[21,22,13,20,"utcTimestamp"],[21,34,13,32],[21,35,13,33],[22,4,14,2],[22,5,14,3],[22,11,14,9],[23,6,15,4,"date"],[23,10,15,8],[23,13,15,11,"timestamp"],[23,22,15,20],[24,4,16,2],[25,4,18,2],[25,8,18,8,"now"],[25,11,18,11],[25,14,18,14],[25,18,18,18,"Date"],[25,22,18,22],[25,23,18,23],[25,24,18,24],[26,4,20,2],[26,8,20,8,"isToday"],[26,15,20,15],[26,18,20,18,"date"],[26,22,20,22],[26,23,20,23,"toDateString"],[26,35,20,35],[26,36,20,36],[26,37,20,37],[26,42,20,42,"now"],[26,45,20,45],[26,46,20,46,"toDateString"],[26,58,20,58],[26,59,20,59],[26,60,20,60],[27,4,22,2],[27,8,22,6,"isToday"],[27,15,22,13],[27,17,22,15],[28,6,23,4],[29,6,24,4],[29,13,24,11,"date"],[29,17,24,15],[29,18,24,16,"toLocaleTimeString"],[29,36,24,34],[29,37,24,35],[29,39,24,37],[29,41,24,39],[30,8,24,41,"hour"],[30,12,24,45],[30,14,24,47],[30,23,24,56],[31,8,24,58,"minute"],[31,14,24,64],[31,16,24,66],[32,6,24,76],[32,7,24,77],[32,8,24,78],[33,4,25,2],[35,4,27,2],[36,4,28,2],[36,8,28,8,"yesterday"],[36,17,28,17],[36,20,28,20],[36,24,28,24,"Date"],[36,28,28,28],[36,29,28,29,"now"],[36,32,28,32],[36,33,28,33],[37,4,29,2,"yesterday"],[37,13,29,11],[37,14,29,12,"setDate"],[37,21,29,19],[37,22,29,20,"yesterday"],[37,31,29,29],[37,32,29,30,"getDate"],[37,39,29,37],[37,40,29,38],[37,41,29,39],[37,44,29,42],[37,45,29,43],[37,46,29,44],[38,4,30,2],[38,8,30,8,"isYesterday"],[38,19,30,19],[38,22,30,22,"date"],[38,26,30,26],[38,27,30,27,"toDateString"],[38,39,30,39],[38,40,30,40],[38,41,30,41],[38,46,30,46,"yesterday"],[38,55,30,55],[38,56,30,56,"toDateString"],[38,68,30,68],[38,69,30,69],[38,70,30,70],[39,4,32,2],[39,8,32,6,"isYesterday"],[39,19,32,17],[39,21,32,19],[40,6,33,4],[40,13,33,11],[40,24,33,22],[41,4,34,2],[43,4,36,2],[44,4,37,2],[44,8,37,8,"weekAgo"],[44,15,37,15],[44,18,37,18],[44,22,37,22,"Date"],[44,26,37,26],[44,27,37,27,"now"],[44,30,37,30],[44,31,37,31],[45,4,38,2,"weekAgo"],[45,11,38,9],[45,12,38,10,"setDate"],[45,19,38,17],[45,20,38,18,"weekAgo"],[45,27,38,25],[45,28,38,26,"getDate"],[45,35,38,33],[45,36,38,34],[45,37,38,35],[45,40,38,38],[45,41,38,39],[45,42,38,40],[46,4,40,2],[46,8,40,6,"date"],[46,12,40,10],[46,15,40,13,"weekAgo"],[46,22,40,20],[46,24,40,22],[47,6,41,4],[48,6,42,4],[48,13,42,11,"date"],[48,17,42,15],[48,18,42,16,"toLocaleDateString"],[48,36,42,34],[48,37,42,35],[48,39,42,37],[48,41,42,39],[49,8,42,41,"weekday"],[49,15,42,48],[49,17,42,50],[50,6,42,57],[50,7,42,58],[50,8,42,59],[51,4,43,2],[53,4,45,2],[54,4,46,2],[54,11,46,9,"date"],[54,15,46,13],[54,16,46,14,"toLocaleDateString"],[54,34,46,32],[54,35,46,33],[54,37,46,35],[54,39,46,37],[55,6,46,39,"month"],[55,11,46,44],[55,13,46,46],[55,20,46,53],[56,6,46,55,"day"],[56,9,46,58],[56,11,46,60],[57,4,46,70],[57,5,46,71],[57,6,46,72],[58,2,47,0],[60,2,49,0],[61,0,50,0],[62,0,51,0],[63,0,52,0],[64,2,53,7],[64,11,53,16,"formatFullTimestamp"],[64,30,53,35,"formatFullTimestamp"],[64,31,53,36,"timestamp"],[64,40,53,60],[64,42,53,70],[65,4,54,2],[66,4,55,2],[66,8,55,6,"date"],[66,12,55,16],[67,4,56,2],[67,8,56,6],[67,15,56,13,"timestamp"],[67,24,56,22],[67,29,56,27],[67,37,56,35],[67,39,56,37],[68,6,57,4],[69,6,58,4],[69,10,58,10,"utcTimestamp"],[69,22,58,22],[69,25,58,25,"timestamp"],[69,34,58,34],[69,35,58,35,"endsWith"],[69,43,58,43],[69,44,58,44],[69,47,58,47],[69,48,58,48],[69,51,58,51,"timestamp"],[69,60,58,60],[69,63,58,63,"timestamp"],[69,72,58,72],[69,75,58,75],[69,78,58,78],[70,6,59,4,"date"],[70,10,59,8],[70,13,59,11],[70,17,59,15,"Date"],[70,21,59,19],[70,22,59,20,"utcTimestamp"],[70,34,59,32],[70,35,59,33],[71,4,60,2],[71,5,60,3],[71,11,60,9],[72,6,61,4,"date"],[72,10,61,8],[72,13,61,11,"timestamp"],[72,22,61,20],[73,4,62,2],[74,4,64,2],[74,11,64,9,"date"],[74,15,64,13],[74,16,64,14,"toLocaleString"],[74,30,64,28],[74,31,64,29],[74,33,64,31],[74,35,64,33],[75,6,65,4,"month"],[75,11,65,9],[75,13,65,11],[75,20,65,18],[76,6,66,4,"day"],[76,9,66,7],[76,11,66,9],[76,20,66,18],[77,6,67,4,"hour"],[77,10,67,8],[77,12,67,10],[77,21,67,19],[78,6,68,4,"minute"],[78,12,68,10],[78,14,68,12],[79,4,69,2],[79,5,69,3],[79,6,69,4],[80,2,70,0],[81,0,70,1],[81,3]],"functionMap":{"names":["<global>","formatChatTime","formatFullTimestamp"],"mappings":"AAA;OCM;CDwC;OEM;CFiB"},"hasCjsExports":false},"type":"js/module"}]}